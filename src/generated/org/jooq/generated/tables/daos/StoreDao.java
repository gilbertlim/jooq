/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.generated.tables.Store_;
import org.jooq.generated.tables.pojos.Store;
import org.jooq.generated.tables.records.StoreRecord;
import org.jooq.impl.AutoConverter;
import org.jooq.impl.DAOImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.10",
        "schema version:1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StoreDao extends DAOImpl<StoreRecord, Store, Long> {

    /**
     * Create a new StoreDao without any configuration
     */
    public StoreDao() {
        super(Store_.STORE, Store.class);
    }

    /**
     * Create a new StoreDao with an attached configuration
     */
    public StoreDao(Configuration configuration) {
        super(Store_.STORE, Store.class, configuration);
    }

    @Override
    public Long getId(Store object) {
        return object.getStoreId();
    }

    /**
     * Fetch records that have <code>store_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Store> fetchRangeOfStoreId_(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Store_.STORE.STORE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>store_id IN (values)</code>
     */
    public List<Store> fetchByStoreId_(Long... values) {
        return fetch(Store_.STORE.STORE_ID, values);
    }

    /**
     * Fetch a unique record that has <code>store_id = value</code>
     */
    public Store fetchOneByStoreId_(Long value) {
        return fetchOne(Store_.STORE.STORE_ID, value);
    }

    /**
     * Fetch a unique record that has <code>store_id = value</code>
     */
    public Optional<Store> fetchOptionalByStoreId_(Long value) {
        return fetchOptional(Store_.STORE.STORE_ID, value);
    }

    /**
     * Fetch records that have <code>manager_staff_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Store> fetchRangeOfManagerStaffId_(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Store_.STORE.MANAGER_STAFF_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>manager_staff_id IN (values)</code>
     */
    public List<Store> fetchByManagerStaffId_(Long... values) {
        return fetch(Store_.STORE.MANAGER_STAFF_ID, values);
    }

    /**
     * Fetch a unique record that has <code>manager_staff_id = value</code>
     */
    public Store fetchOneByManagerStaffId_(Long value) {
        return fetchOne(Store_.STORE.MANAGER_STAFF_ID, value);
    }

    /**
     * Fetch a unique record that has <code>manager_staff_id = value</code>
     */
    public Optional<Store> fetchOptionalByManagerStaffId_(Long value) {
        return fetchOptional(Store_.STORE.MANAGER_STAFF_ID, value);
    }

    /**
     * Fetch records that have <code>address_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Store> fetchRangeOfAddressId_(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Store_.STORE.ADDRESS_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>address_id IN (values)</code>
     */
    public List<Store> fetchByAddressId_(Long... values) {
        return fetch(Store_.STORE.ADDRESS_ID, values);
    }

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Store> fetchRangeOfLastUpdate_(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Store_.STORE.LAST_UPDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    public List<Store> fetchByLastUpdate_(LocalDateTime... values) {
        return fetch(Store_.STORE.LAST_UPDATE, values);
    }
}
