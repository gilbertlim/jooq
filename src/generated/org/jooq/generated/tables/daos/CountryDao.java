/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.generated.tables.Country_;
import org.jooq.generated.tables.pojos.Country;
import org.jooq.generated.tables.records.CountryRecord;
import org.jooq.impl.AutoConverter;
import org.jooq.impl.DAOImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CountryDao extends DAOImpl<CountryRecord, Country, Long> {

    /**
     * Create a new CountryDao without any configuration
     */
    public CountryDao() {
        super(Country_.COUNTRY, Country.class);
    }

    /**
     * Create a new CountryDao with an attached configuration
     */
    public CountryDao(Configuration configuration) {
        super(Country_.COUNTRY, Country.class, configuration);
    }

    @Override
    public Long getId(Country object) {
        return object.getCountryId();
    }

    /**
     * Fetch records that have <code>country_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Country> fetchRangeOfCountryId_(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Country_.COUNTRY.COUNTRY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>country_id IN (values)</code>
     */
    public List<Country> fetchByCountryId_(Long... values) {
        return fetch(Country_.COUNTRY.COUNTRY_ID, values);
    }

    /**
     * Fetch a unique record that has <code>country_id = value</code>
     */
    public Country fetchOneByCountryId_(Long value) {
        return fetchOne(Country_.COUNTRY.COUNTRY_ID, value);
    }

    /**
     * Fetch a unique record that has <code>country_id = value</code>
     */
    public Optional<Country> fetchOptionalByCountryId_(Long value) {
        return fetchOptional(Country_.COUNTRY.COUNTRY_ID, value);
    }

    /**
     * Fetch records that have <code>country BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Country> fetchRangeOfCountry_(String lowerInclusive, String upperInclusive) {
        return fetchRange(Country_.COUNTRY.COUNTRY_, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>country IN (values)</code>
     */
    public List<Country> fetchByCountry_(String... values) {
        return fetch(Country_.COUNTRY.COUNTRY_, values);
    }

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Country> fetchRangeOfLastUpdate_(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Country_.COUNTRY.LAST_UPDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    public List<Country> fetchByLastUpdate_(LocalDateTime... values) {
        return fetch(Country_.COUNTRY.LAST_UPDATE, values);
    }
}
