/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.generated.tables.Customer_;
import org.jooq.generated.tables.pojos.Customer;
import org.jooq.generated.tables.records.CustomerRecord;
import org.jooq.impl.AutoConverter;
import org.jooq.impl.DAOImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.10",
        "schema version:1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CustomerDao extends DAOImpl<CustomerRecord, Customer, Long> {

    /**
     * Create a new CustomerDao without any configuration
     */
    public CustomerDao() {
        super(Customer_.CUSTOMER, Customer.class);
    }

    /**
     * Create a new CustomerDao with an attached configuration
     */
    public CustomerDao(Configuration configuration) {
        super(Customer_.CUSTOMER, Customer.class, configuration);
    }

    @Override
    public Long getId(Customer object) {
        return object.getCustomerId();
    }

    /**
     * Fetch records that have <code>customer_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Customer> fetchRangeOfCustomerId_(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Customer_.CUSTOMER.CUSTOMER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>customer_id IN (values)</code>
     */
    public List<Customer> fetchByCustomerId_(Long... values) {
        return fetch(Customer_.CUSTOMER.CUSTOMER_ID, values);
    }

    /**
     * Fetch a unique record that has <code>customer_id = value</code>
     */
    public Customer fetchOneByCustomerId_(Long value) {
        return fetchOne(Customer_.CUSTOMER.CUSTOMER_ID, value);
    }

    /**
     * Fetch a unique record that has <code>customer_id = value</code>
     */
    public Optional<Customer> fetchOptionalByCustomerId_(Long value) {
        return fetchOptional(Customer_.CUSTOMER.CUSTOMER_ID, value);
    }

    /**
     * Fetch records that have <code>store_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Customer> fetchRangeOfStoreId_(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Customer_.CUSTOMER.STORE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>store_id IN (values)</code>
     */
    public List<Customer> fetchByStoreId_(Long... values) {
        return fetch(Customer_.CUSTOMER.STORE_ID, values);
    }

    /**
     * Fetch records that have <code>first_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Customer> fetchRangeOfFirstName_(String lowerInclusive, String upperInclusive) {
        return fetchRange(Customer_.CUSTOMER.FIRST_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>first_name IN (values)</code>
     */
    public List<Customer> fetchByFirstName_(String... values) {
        return fetch(Customer_.CUSTOMER.FIRST_NAME, values);
    }

    /**
     * Fetch records that have <code>last_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Customer> fetchRangeOfLastName_(String lowerInclusive, String upperInclusive) {
        return fetchRange(Customer_.CUSTOMER.LAST_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_name IN (values)</code>
     */
    public List<Customer> fetchByLastName_(String... values) {
        return fetch(Customer_.CUSTOMER.LAST_NAME, values);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Customer> fetchRangeOfEmail_(String lowerInclusive, String upperInclusive) {
        return fetchRange(Customer_.CUSTOMER.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<Customer> fetchByEmail_(String... values) {
        return fetch(Customer_.CUSTOMER.EMAIL, values);
    }

    /**
     * Fetch records that have <code>address_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Customer> fetchRangeOfAddressId_(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Customer_.CUSTOMER.ADDRESS_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>address_id IN (values)</code>
     */
    public List<Customer> fetchByAddressId_(Long... values) {
        return fetch(Customer_.CUSTOMER.ADDRESS_ID, values);
    }

    /**
     * Fetch records that have <code>active BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Customer> fetchRangeOfActive_(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(Customer_.CUSTOMER.ACTIVE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>active IN (values)</code>
     */
    public List<Customer> fetchByActive_(Byte... values) {
        return fetch(Customer_.CUSTOMER.ACTIVE, values);
    }

    /**
     * Fetch records that have <code>create_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Customer> fetchRangeOfCreateDate_(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Customer_.CUSTOMER.CREATE_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_date IN (values)</code>
     */
    public List<Customer> fetchByCreateDate_(LocalDateTime... values) {
        return fetch(Customer_.CUSTOMER.CREATE_DATE, values);
    }

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<Customer> fetchRangeOfLastUpdate_(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Customer_.CUSTOMER.LAST_UPDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    public List<Customer> fetchByLastUpdate_(LocalDateTime... values) {
        return fetch(Customer_.CUSTOMER.LAST_UPDATE, values);
    }
}
