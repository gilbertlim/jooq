/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Indexes;
import org.jooq.generated.Keys;
import org.jooq.generated.Sakila_;
import org.jooq.generated.tables.records.FilmTextRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FilmText_ extends TableImpl<FilmTextRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sakila.film_text</code>
     */
    public static final FilmText_ FILM_TEXT = new FilmText_();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FilmTextRecord> getRecordType() {
        return FilmTextRecord.class;
    }

    /**
     * The column <code>sakila.film_text.film_id</code>.
     */
    public final TableField<FilmTextRecord, Integer> FILM_ID = createField(DSL.name("film_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sakila.film_text.title</code>.
     */
    public final TableField<FilmTextRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>sakila.film_text.description</code>.
     */
    public final TableField<FilmTextRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    private FilmText_(Name alias, Table<FilmTextRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private FilmText_(Name alias, Table<FilmTextRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>sakila.film_text</code> table reference
     */
    public FilmText_(String alias) {
        this(DSL.name(alias), FILM_TEXT);
    }

    /**
     * Create an aliased <code>sakila.film_text</code> table reference
     */
    public FilmText_(Name alias) {
        this(alias, FILM_TEXT);
    }

    /**
     * Create a <code>sakila.film_text</code> table reference
     */
    public FilmText_() {
        this(DSL.name("film_text"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Sakila_.SAKILA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.FILM_TEXT_IDX_TITLE_DESCRIPTION);
    }

    @Override
    public UniqueKey<FilmTextRecord> getPrimaryKey() {
        return Keys.KEY_FILM_TEXT_PRIMARY;
    }

    @Override
    public FilmText_ as(String alias) {
        return new FilmText_(DSL.name(alias), this);
    }

    @Override
    public FilmText_ as(Name alias) {
        return new FilmText_(alias, this);
    }

    @Override
    public FilmText_ as(Table<?> alias) {
        return new FilmText_(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FilmText_ rename(String name) {
        return new FilmText_(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FilmText_ rename(Name name) {
        return new FilmText_(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FilmText_ rename(Table<?> name) {
        return new FilmText_(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FilmText_ where(Condition condition) {
        return new FilmText_(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FilmText_ where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FilmText_ where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FilmText_ where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FilmText_ where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FilmText_ where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FilmText_ where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public FilmText_ where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FilmText_ whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public FilmText_ whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
