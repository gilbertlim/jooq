/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated;


import javax.annotation.processing.Generated;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.generated.tables.Actor_;
import org.jooq.generated.tables.Address_;
import org.jooq.generated.tables.Category_;
import org.jooq.generated.tables.City_;
import org.jooq.generated.tables.Country_;
import org.jooq.generated.tables.Customer_;
import org.jooq.generated.tables.FilmActor_;
import org.jooq.generated.tables.FilmCategory_;
import org.jooq.generated.tables.FilmText_;
import org.jooq.generated.tables.Film_;
import org.jooq.generated.tables.Inventory_;
import org.jooq.generated.tables.Language_;
import org.jooq.generated.tables.Payment_;
import org.jooq.generated.tables.Rental_;
import org.jooq.generated.tables.Staff_;
import org.jooq.generated.tables.Store_;
import org.jooq.generated.tables.records.ActorRecord;
import org.jooq.generated.tables.records.AddressRecord;
import org.jooq.generated.tables.records.CategoryRecord;
import org.jooq.generated.tables.records.CityRecord;
import org.jooq.generated.tables.records.CountryRecord;
import org.jooq.generated.tables.records.CustomerRecord;
import org.jooq.generated.tables.records.FilmActorRecord;
import org.jooq.generated.tables.records.FilmCategoryRecord;
import org.jooq.generated.tables.records.FilmRecord;
import org.jooq.generated.tables.records.FilmTextRecord;
import org.jooq.generated.tables.records.InventoryRecord;
import org.jooq.generated.tables.records.LanguageRecord;
import org.jooq.generated.tables.records.PaymentRecord;
import org.jooq.generated.tables.records.RentalRecord;
import org.jooq.generated.tables.records.StaffRecord;
import org.jooq.generated.tables.records.StoreRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * sakila.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.10",
        "schema version:1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ActorRecord> KEY_ACTOR_PRIMARY = Internal.createUniqueKey(Actor_.ACTOR, DSL.name("KEY_actor_PRIMARY"), new TableField[] { Actor_.ACTOR.ACTOR_ID }, true);
    public static final UniqueKey<AddressRecord> KEY_ADDRESS_PRIMARY = Internal.createUniqueKey(Address_.ADDRESS, DSL.name("KEY_address_PRIMARY"), new TableField[] { Address_.ADDRESS.ADDRESS_ID }, true);
    public static final UniqueKey<CategoryRecord> KEY_CATEGORY_PRIMARY = Internal.createUniqueKey(Category_.CATEGORY, DSL.name("KEY_category_PRIMARY"), new TableField[] { Category_.CATEGORY.CATEGORY_ID }, true);
    public static final UniqueKey<CityRecord> KEY_CITY_PRIMARY = Internal.createUniqueKey(City_.CITY, DSL.name("KEY_city_PRIMARY"), new TableField[] { City_.CITY.CITY_ID }, true);
    public static final UniqueKey<CountryRecord> KEY_COUNTRY_PRIMARY = Internal.createUniqueKey(Country_.COUNTRY, DSL.name("KEY_country_PRIMARY"), new TableField[] { Country_.COUNTRY.COUNTRY_ID }, true);
    public static final UniqueKey<CustomerRecord> KEY_CUSTOMER_PRIMARY = Internal.createUniqueKey(Customer_.CUSTOMER, DSL.name("KEY_customer_PRIMARY"), new TableField[] { Customer_.CUSTOMER.CUSTOMER_ID }, true);
    public static final UniqueKey<FilmRecord> KEY_FILM_PRIMARY = Internal.createUniqueKey(Film_.FILM, DSL.name("KEY_film_PRIMARY"), new TableField[] { Film_.FILM.FILM_ID }, true);
    public static final UniqueKey<FilmActorRecord> KEY_FILM_ACTOR_PRIMARY = Internal.createUniqueKey(FilmActor_.FILM_ACTOR, DSL.name("KEY_film_actor_PRIMARY"), new TableField[] { FilmActor_.FILM_ACTOR.ACTOR_ID, FilmActor_.FILM_ACTOR.FILM_ID }, true);
    public static final UniqueKey<FilmCategoryRecord> KEY_FILM_CATEGORY_PRIMARY = Internal.createUniqueKey(FilmCategory_.FILM_CATEGORY, DSL.name("KEY_film_category_PRIMARY"), new TableField[] { FilmCategory_.FILM_CATEGORY.FILM_ID, FilmCategory_.FILM_CATEGORY.CATEGORY_ID }, true);
    public static final UniqueKey<FilmTextRecord> KEY_FILM_TEXT_PRIMARY = Internal.createUniqueKey(FilmText_.FILM_TEXT, DSL.name("KEY_film_text_PRIMARY"), new TableField[] { FilmText_.FILM_TEXT.FILM_ID }, true);
    public static final UniqueKey<InventoryRecord> KEY_INVENTORY_PRIMARY = Internal.createUniqueKey(Inventory_.INVENTORY, DSL.name("KEY_inventory_PRIMARY"), new TableField[] { Inventory_.INVENTORY.INVENTORY_ID }, true);
    public static final UniqueKey<LanguageRecord> KEY_LANGUAGE_PRIMARY = Internal.createUniqueKey(Language_.LANGUAGE, DSL.name("KEY_language_PRIMARY"), new TableField[] { Language_.LANGUAGE.LANGUAGE_ID }, true);
    public static final UniqueKey<PaymentRecord> KEY_PAYMENT_PRIMARY = Internal.createUniqueKey(Payment_.PAYMENT, DSL.name("KEY_payment_PRIMARY"), new TableField[] { Payment_.PAYMENT.PAYMENT_ID }, true);
    public static final UniqueKey<RentalRecord> KEY_RENTAL_PRIMARY = Internal.createUniqueKey(Rental_.RENTAL, DSL.name("KEY_rental_PRIMARY"), new TableField[] { Rental_.RENTAL.RENTAL_ID }, true);
    public static final UniqueKey<RentalRecord> KEY_RENTAL_RENTAL_DATE = Internal.createUniqueKey(Rental_.RENTAL, DSL.name("KEY_rental_rental_date"), new TableField[] { Rental_.RENTAL.RENTAL_DATE, Rental_.RENTAL.INVENTORY_ID, Rental_.RENTAL.CUSTOMER_ID }, true);
    public static final UniqueKey<StaffRecord> KEY_STAFF_PRIMARY = Internal.createUniqueKey(Staff_.STAFF, DSL.name("KEY_staff_PRIMARY"), new TableField[] { Staff_.STAFF.STAFF_ID }, true);
    public static final UniqueKey<StoreRecord> KEY_STORE_IDX_UNIQUE_MANAGER = Internal.createUniqueKey(Store_.STORE, DSL.name("KEY_store_idx_unique_manager"), new TableField[] { Store_.STORE.MANAGER_STAFF_ID }, true);
    public static final UniqueKey<StoreRecord> KEY_STORE_PRIMARY = Internal.createUniqueKey(Store_.STORE, DSL.name("KEY_store_PRIMARY"), new TableField[] { Store_.STORE.STORE_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AddressRecord, CityRecord> FK_ADDRESS_CITY = Internal.createForeignKey(Address_.ADDRESS, DSL.name("fk_address_city"), new TableField[] { Address_.ADDRESS.CITY_ID }, Keys.KEY_CITY_PRIMARY, new TableField[] { City_.CITY.CITY_ID }, true);
    public static final ForeignKey<CityRecord, CountryRecord> FK_CITY_COUNTRY = Internal.createForeignKey(City_.CITY, DSL.name("fk_city_country"), new TableField[] { City_.CITY.COUNTRY_ID }, Keys.KEY_COUNTRY_PRIMARY, new TableField[] { Country_.COUNTRY.COUNTRY_ID }, true);
    public static final ForeignKey<CustomerRecord, AddressRecord> FK_CUSTOMER_ADDRESS = Internal.createForeignKey(Customer_.CUSTOMER, DSL.name("fk_customer_address"), new TableField[] { Customer_.CUSTOMER.ADDRESS_ID }, Keys.KEY_ADDRESS_PRIMARY, new TableField[] { Address_.ADDRESS.ADDRESS_ID }, true);
    public static final ForeignKey<CustomerRecord, StoreRecord> FK_CUSTOMER_STORE = Internal.createForeignKey(Customer_.CUSTOMER, DSL.name("fk_customer_store"), new TableField[] { Customer_.CUSTOMER.STORE_ID }, Keys.KEY_STORE_PRIMARY, new TableField[] { Store_.STORE.STORE_ID }, true);
    public static final ForeignKey<FilmRecord, LanguageRecord> FK_FILM_LANGUAGE = Internal.createForeignKey(Film_.FILM, DSL.name("fk_film_language"), new TableField[] { Film_.FILM.LANGUAGE_ID }, Keys.KEY_LANGUAGE_PRIMARY, new TableField[] { Language_.LANGUAGE.LANGUAGE_ID }, true);
    public static final ForeignKey<FilmRecord, LanguageRecord> FK_FILM_LANGUAGE_ORIGINAL = Internal.createForeignKey(Film_.FILM, DSL.name("fk_film_language_original"), new TableField[] { Film_.FILM.ORIGINAL_LANGUAGE_ID }, Keys.KEY_LANGUAGE_PRIMARY, new TableField[] { Language_.LANGUAGE.LANGUAGE_ID }, true);
    public static final ForeignKey<FilmActorRecord, ActorRecord> FK_FILM_ACTOR_ACTOR = Internal.createForeignKey(FilmActor_.FILM_ACTOR, DSL.name("fk_film_actor_actor"), new TableField[] { FilmActor_.FILM_ACTOR.ACTOR_ID }, Keys.KEY_ACTOR_PRIMARY, new TableField[] { Actor_.ACTOR.ACTOR_ID }, true);
    public static final ForeignKey<FilmActorRecord, FilmRecord> FK_FILM_ACTOR_FILM = Internal.createForeignKey(FilmActor_.FILM_ACTOR, DSL.name("fk_film_actor_film"), new TableField[] { FilmActor_.FILM_ACTOR.FILM_ID }, Keys.KEY_FILM_PRIMARY, new TableField[] { Film_.FILM.FILM_ID }, true);
    public static final ForeignKey<FilmCategoryRecord, CategoryRecord> FK_FILM_CATEGORY_CATEGORY = Internal.createForeignKey(FilmCategory_.FILM_CATEGORY, DSL.name("fk_film_category_category"), new TableField[] { FilmCategory_.FILM_CATEGORY.CATEGORY_ID }, Keys.KEY_CATEGORY_PRIMARY, new TableField[] { Category_.CATEGORY.CATEGORY_ID }, true);
    public static final ForeignKey<FilmCategoryRecord, FilmRecord> FK_FILM_CATEGORY_FILM = Internal.createForeignKey(FilmCategory_.FILM_CATEGORY, DSL.name("fk_film_category_film"), new TableField[] { FilmCategory_.FILM_CATEGORY.FILM_ID }, Keys.KEY_FILM_PRIMARY, new TableField[] { Film_.FILM.FILM_ID }, true);
    public static final ForeignKey<InventoryRecord, FilmRecord> FK_INVENTORY_FILM = Internal.createForeignKey(Inventory_.INVENTORY, DSL.name("fk_inventory_film"), new TableField[] { Inventory_.INVENTORY.FILM_ID }, Keys.KEY_FILM_PRIMARY, new TableField[] { Film_.FILM.FILM_ID }, true);
    public static final ForeignKey<InventoryRecord, StoreRecord> FK_INVENTORY_STORE = Internal.createForeignKey(Inventory_.INVENTORY, DSL.name("fk_inventory_store"), new TableField[] { Inventory_.INVENTORY.STORE_ID }, Keys.KEY_STORE_PRIMARY, new TableField[] { Store_.STORE.STORE_ID }, true);
    public static final ForeignKey<PaymentRecord, CustomerRecord> FK_PAYMENT_CUSTOMER = Internal.createForeignKey(Payment_.PAYMENT, DSL.name("fk_payment_customer"), new TableField[] { Payment_.PAYMENT.CUSTOMER_ID }, Keys.KEY_CUSTOMER_PRIMARY, new TableField[] { Customer_.CUSTOMER.CUSTOMER_ID }, true);
    public static final ForeignKey<PaymentRecord, RentalRecord> FK_PAYMENT_RENTAL = Internal.createForeignKey(Payment_.PAYMENT, DSL.name("fk_payment_rental"), new TableField[] { Payment_.PAYMENT.RENTAL_ID }, Keys.KEY_RENTAL_PRIMARY, new TableField[] { Rental_.RENTAL.RENTAL_ID }, true);
    public static final ForeignKey<PaymentRecord, StaffRecord> FK_PAYMENT_STAFF = Internal.createForeignKey(Payment_.PAYMENT, DSL.name("fk_payment_staff"), new TableField[] { Payment_.PAYMENT.STAFF_ID }, Keys.KEY_STAFF_PRIMARY, new TableField[] { Staff_.STAFF.STAFF_ID }, true);
    public static final ForeignKey<RentalRecord, CustomerRecord> FK_RENTAL_CUSTOMER = Internal.createForeignKey(Rental_.RENTAL, DSL.name("fk_rental_customer"), new TableField[] { Rental_.RENTAL.CUSTOMER_ID }, Keys.KEY_CUSTOMER_PRIMARY, new TableField[] { Customer_.CUSTOMER.CUSTOMER_ID }, true);
    public static final ForeignKey<RentalRecord, InventoryRecord> FK_RENTAL_INVENTORY = Internal.createForeignKey(Rental_.RENTAL, DSL.name("fk_rental_inventory"), new TableField[] { Rental_.RENTAL.INVENTORY_ID }, Keys.KEY_INVENTORY_PRIMARY, new TableField[] { Inventory_.INVENTORY.INVENTORY_ID }, true);
    public static final ForeignKey<RentalRecord, StaffRecord> FK_RENTAL_STAFF = Internal.createForeignKey(Rental_.RENTAL, DSL.name("fk_rental_staff"), new TableField[] { Rental_.RENTAL.STAFF_ID }, Keys.KEY_STAFF_PRIMARY, new TableField[] { Staff_.STAFF.STAFF_ID }, true);
    public static final ForeignKey<StaffRecord, AddressRecord> FK_STAFF_ADDRESS = Internal.createForeignKey(Staff_.STAFF, DSL.name("fk_staff_address"), new TableField[] { Staff_.STAFF.ADDRESS_ID }, Keys.KEY_ADDRESS_PRIMARY, new TableField[] { Address_.ADDRESS.ADDRESS_ID }, true);
    public static final ForeignKey<StaffRecord, StoreRecord> FK_STAFF_STORE = Internal.createForeignKey(Staff_.STAFF, DSL.name("fk_staff_store"), new TableField[] { Staff_.STAFF.STORE_ID }, Keys.KEY_STORE_PRIMARY, new TableField[] { Store_.STORE.STORE_ID }, true);
    public static final ForeignKey<StoreRecord, AddressRecord> FK_STORE_ADDRESS = Internal.createForeignKey(Store_.STORE, DSL.name("fk_store_address"), new TableField[] { Store_.STORE.ADDRESS_ID }, Keys.KEY_ADDRESS_PRIMARY, new TableField[] { Address_.ADDRESS.ADDRESS_ID }, true);
    public static final ForeignKey<StoreRecord, StaffRecord> FK_STORE_STAFF = Internal.createForeignKey(Store_.STORE, DSL.name("fk_store_staff"), new TableField[] { Store_.STORE.MANAGER_STAFF_ID }, Keys.KEY_STAFF_PRIMARY, new TableField[] { Staff_.STAFF.STAFF_ID }, true);
}
